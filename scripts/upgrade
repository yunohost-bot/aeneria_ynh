#!/bin/bash

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression "Ensuring downward compatibility..."

# If minutes or hour do not exist, create them
if [ -z "${minutes:-}" ] || [ -z "${hour:-}" ]; then
  # Generate random running schedule, and save $hour and $minutes as app parameters
  generate_random_minutes_hour
fi

# Before version 2.x æneria could be installed under a path,
# this functionnality has been deprecated since version 2.0.0 and æneria
# now need to be installed under its own domain.
# If the app is currently installed under a path, we warn the admin
# that he should move the app under its own domain
if [ "$path" != "/" ]; then
  ynh_die "Since version 2.0.0, $app need to be installed under its own domain. \
  Before upgrading, change $app URL: delete the path and switch to a new domain if needed."
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# FIXME: this is still supported but the recommendation is now to *always* re-setup the app sources wether or not the upstream sources changed
if ynh_app_upstream_version_changed
then
  ynh_script_progression "Upgrading source files..."

  # For aeneria source update, we use a temporary directory because
  # without it, patches can't be apply correctly:
  # In 'app-00-ldap-auth.patch' we create a new file, if we try
  # to apply the patch a second time while the file already exists, it
  # throws a warning leading to an upgrade fail.

  # Create tmpdir for new sources
  tmpdir="$(ynh_smart_mktemp min_size=300)"

  # Download, check integrity, uncompress and patch the source from app.src
  ynh_setup_source --dest_dir="$tmpdir"

  # Keep private dir
  mv "$install_dir/private" "$tmpdir"

  # Replace the old aeneria by the new one
  ynh_safe_rm "$install_dir"
  mv "$tmpdir" "$install_dir"
  ynh_safe_rm "$tmpdir"
fi

#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown -R $app:www-data "$install_dir"
#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod -R 750 "$install_dir"
#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

# Create a dedicated NGINX config
ynh_config_add_nginx

# Create a dedicated PHP-FPM config
ynh_config_add_phpfpm

ynh_config_add --template="aeneria.cron" --destination="/etc/cron.d/$app"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown root: "/etc/cron.d/$app"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 644 "/etc/cron.d/$app"

#=================================================
# SPECIFIC SETUP
#=================================================
# CONFIGURE AENERIA
#=================================================
ynh_script_progression "Configuring $app..."

ynh_config_add --template=".env" --destination="$install_dir/.env"

# Restrict rights to aeneria user only
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 600 "$install_dir/.env"

#=================================================
# UPGRADE AENERIA
#=================================================
ynh_script_progression "Upgrading $app..."

# Install dependencies and aeneria
pushd $install_dir
  ynh_exec_as_app php$php_version bin/console cache:clear -n
  ynh_exec_as_app php$php_version bin/console doctrine:migrations:migrate -n

  # Set admin user
  mail=$(ynh_user_get_info --username="$admin" --key='mail')
  user_exists=$(ynh_exec_as_app php$php_version bin/console aeneria:user:exist "$mail")
  if [ $user_exists -eq 0 ]
  then
    user_pass=$(ynh_string_random)
    ynh_exec_as_app php$php_version bin/console aeneria:user:add "$mail" "$user_pass" -n
  fi

  # Regenerate RSA keys
  ynh_exec_as_app php$php_version bin/console aeneria:generate-key -n
popd

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
